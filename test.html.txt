<!DOCTYPE html>
<html lang="ar">
<head>
  <meta charset="utf-8" />
  <title>اختبار الـ Backend - Social App</title>
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <style>
    body { font-family: Tahoma, Arial, sans-serif; background:#f4f6f8; padding:20px; color:#222; }
    .wrap { max-width:900px; margin:0 auto; }
    .card { background:#fff; border-radius:8px; padding:16px; margin-bottom:14px; box-shadow:0 2px 6px rgba(0,0,0,0.06); }
    h1 { margin:0 0 10px 0; font-size:22px; }
    h2 { margin:0 0 8px 0; font-size:18px; color:#333; }
    label { display:block; margin-top:8px; font-size:13px; color:#444; }
    input, textarea, select { width:100%; padding:8px 10px; margin-top:6px; box-sizing:border-box; border:1px solid #dfe6eb; border-radius:6px; }
    button { margin-top:10px; padding:10px 14px; border:0; background:#0b74de; color:#fff; border-radius:6px; cursor:pointer; }
    button.secondary { background:#6c757d; }
    pre { background:#0f1720; color:#d1fae5; padding:12px; border-radius:6px; overflow:auto; max-height:280px; }
    .row { display:flex; gap:12px; }
    .col { flex:1; }
    .muted { color:#666; font-size:13px; margin-top:6px; }
    .small { font-size:13px; color:#444; }
  </style>
</head>
<body>
  <div class="wrap">
    <div class="card">
      <h1>Backend Test — Social App</h1>
      <p class="muted">غير قيمة <code>API_URL</code> إذا كان السيرفر على رابط آخر (محلي أو Render).</p>
    </div>

    <div class="card" id="config">
      <h2>إعداد API</h2>
      <label>API base URL</label>
      <input id="apiUrl" value="https://my-backend-cyj8.onrender.com/api" />
      <div class="small">مثال: <code>http://localhost:5000/api</code> أو رابط Render الخاص بك.</div>
      <button onclick="saveApiUrl()">احفظ</button>
      <div id="configMsg" class="muted"></div>
    </div>

    <!-- Auth -->
    <div class="card">
      <h2>التسجيل / تسجيل الدخول</h2>
      <div class="row">
        <div class="col">
          <label>Username (للتسجيل)</label>
          <input id="reg_username" placeholder="username" />
          <label>Email</label>
          <input id="reg_email" placeholder="email@example.com" />
          <label>Password</label>
          <input id="reg_password" type="password" placeholder="secret" />
          <button onclick="register()">Register</button>
        </div>

        <div class="col">
          <label>Login Email</label>
          <input id="login_email" placeholder="email@example.com" />
          <label>Login Password</label>
          <input id="login_password" type="password" placeholder="secret" />
          <button onclick="login()">Login</button>

          <div class="small muted">بعد login سيُحفظ الـ token محليًا (localStorage) لتستعمله في طلبات محمية.</div>
          <div style="margin-top:10px;">
            <button class="secondary" onclick="logout()">Logout (مسح الـ token)</button>
          </div>
        </div>
      </div>
      <div style="margin-top:10px;">
        <strong>Auth response:</strong>
        <pre id="authResp">{ }</pre>
      </div>
    </div>

    <!-- Posts -->
    <div class="card">
      <h2>المنشورات (Posts)</h2>
      <div class="row">
        <div class="col">
          <label>New Post Content</label>
          <textarea id="post_content" rows="3" placeholder="محتوى المنشور"></textarea>
          <button onclick="createPost()">Create Post (POST /posts)</button>
        </div>
        <div class="col">
          <label>Get posts</label>
          <div style="display:flex; gap:8px;">
            <button onclick="getPosts()">Get /posts</button>
            <button class="secondary" onclick="clearStorage()">Clear localStorage</button>
          </div>
          <div class="small muted">إذا الـ API لا تدعم POST هذا الزر سيعطي خطأ — لكن Get يعمل لو كان موجود.</div>
        </div>
      </div>

      <div style="margin-top:12px;">
        <strong>Posts response:</strong>
        <pre id="postsResp">[]</pre>
      </div>
    </div>

    <!-- Comments -->
    <div class="card">
      <h2>التعليقات (Comments)</h2>
      <div class="row">
        <div class="col">
          <label>Post ID (مثلاً 1)</label>
          <input id="comment_postId" value="1" />
          <label>New comment text</label>
          <input id="comment_text" placeholder="نص التعليق" />
          <button onclick="createComment()">Create Comment (POST /comments/:postId)</button>
        </div>
        <div class="col">
          <label>Get comments for Post ID</label>
          <div style="display:flex; gap:8px;">
            <input id="get_comments_postId" value="1" style="width:70px;" />
            <button onclick="getComments()">Get /comments/:postId</button>
          </div>
        </div>
      </div>

      <div style="margin-top:12px;">
        <strong>Comments response:</strong>
        <pre id="commentsResp">[]</pre>
      </div>
    </div>

    <!-- raw logs -->
    <div class="card">
      <h2>سجل الطلبات (Raw)</h2>
      <pre id="log" style="max-height:260px;">ready...</pre>
    </div>
  </div>

  <script>
    // ====== إعداد افتراضي - غيّره لو يلزم ======
    let API_URL = document.getElementById('apiUrl').value || "https://my-backend-cyj8.onrender.com/api";

    function saveApiUrl() {
      API_URL = document.getElementById('apiUrl').value.trim();
      document.getElementById('configMsg').innerText = "API URL set to: " + API_URL;
      log("SET API_URL => " + API_URL);
    }

    function setAuthToken(token) {
      if (token) localStorage.setItem('authToken', token);
      else localStorage.removeItem('authToken');
    }
    function getAuthToken() { return localStorage.getItem('authToken'); }
    function clearStorage() { localStorage.clear(); log("localStorage cleared"); updateAuthUI(); }

    function log(txt) {
      const el = document.getElementById('log');
      const now = new Date().toLocaleTimeString();
      el.innerText = now + " — " + txt + "\n" + el.innerText;
    }

    function updateAuthUI() {
      const token = getAuthToken();
      if (token) {
        log("Token present (length " + token.length + ")");
      } else {
        log("No token stored");
      }
    }

    // ======= AUTH =======
    async function register() {
      const username = document.getElementById('reg_username').value;
      const email = document.getElementById('reg_email').value;
      const password = document.getElementById('reg_password').value;
      try {
        const res = await fetch(API_URL + '/auth/register', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ username, email, password })
        });
        const data = await res.json();
        document.getElementById('authResp').innerText = JSON.stringify({ status: res.status, body: data }, null, 2);
        log("POST /auth/register -> " + res.status);
      } catch (err) {
        document.getElementById('authResp').innerText = 'Error: ' + err.message;
        log("ERROR /auth/register -> " + err.message);
      }
    }

    async function login() {
      const email = document.getElementById('login_email').value;
      const password = document.getElementById('login_password').value;
      try {
        const res = await fetch(API_URL + '/auth/login', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ email, password })
        });
        const data = await res.json();
        document.getElementById('authResp').innerText = JSON.stringify({ status: res.status, body: data }, null, 2);
        log("POST /auth/login -> " + res.status);
        // إذا الـ backend يرجع token خزنّو
        if (data && data.token) {
          setAuthToken(data.token);
          log("Stored token");
        }
      } catch (err) {
        document.getElementById('authResp').innerText = 'Error: ' + err.message;
        log("ERROR /auth/login -> " + err.message);
      }
    }

    function logout() {
      setAuthToken(null);
      document.getElementById('authResp').innerText = "Logged out";
      log("Logout");
    }

    // ======= POSTS =======
    async function getPosts() {
      try {
        const res = await fetch(API_URL + '/posts');
        const data = await res.json();
        document.getElementById('postsResp').innerText = JSON.stringify({ status: res.status, body: data }, null, 2);
        log("GET /posts -> " + res.status);
      } catch (err) {
        document.getElementById('postsResp').innerText = 'Error: ' + err.message;
        log("ERROR GET /posts -> " + err.message);
      }
    }

    async function createPost() {
      const content = document.getElementById('post_content').value;
      try {
        // نحاول نضيف Authorization لو متوفر
        const headers = { 'Content-Type': 'application/json' };
        const token = getAuthToken();
        if (token) headers['Authorization'] = 'Bearer ' + token;

        const res = await fetch(API_URL + '/posts', {
          method: 'POST',
          headers,
          body: JSON.stringify({ content })
        });
        const data = await res.json();
        document.getElementById('postsResp').innerText = JSON.stringify({ status: res.status, body: data }, null, 2);
        log("POST /posts -> " + res.status);
      } catch (err) {
        document.getElementById('postsResp').innerText = 'Error: ' + err.message;
        log("ERROR POST /posts -> " + err.message);
      }
    }

    // ======= COMMENTS =======
    async function getComments() {
      const postId = document.getElementById('get_comments_postId').value;
      try {
        const res = await fetch(API_URL + '/comments/' + encodeURIComponent(postId));
        const data = await res.json();
        document.getElementById('commentsResp').innerText = JSON.stringify({ status: res.status, body: data }, null, 2);
        log("GET /comments/" + postId + " -> " + res.status);
      } catch (err) {
        document.getElementById('commentsResp').innerText = 'Error: ' + err.message;
        log("ERROR GET /comments -> " + err.message);
      }
    }

    async function createComment() {
      const postId = document.getElementById('comment_postId').value;
      const text = document.getElementById('comment_text').value;
      try {
        const headers = { 'Content-Type': 'application/json' };
        const token = getAuthToken();
        if (token) headers['Authorization'] = 'Bearer ' + token;

        const res = await fetch(API_URL + '/comments/' + encodeURIComponent(postId), {
          method: 'POST',
          headers,
          body: JSON.stringify({ text })
        });
        const data = await res.json();
        document.getElementById('commentsResp').innerText = JSON.stringify({ status: res.status, body: data }, null, 2);
        log("POST /comments/" + postId + " -> " + res.status);
      } catch (err) {
        document.getElementById('commentsResp').innerText = 'Error: ' + err.message;
        log("ERROR POST /comments -> " + err.message);
      }
    }

    // عند تحميل الصفحة
    (function init() {
      updateAuthUI();
      log("UI ready");
    })();
  </script>
</body>
</html>
